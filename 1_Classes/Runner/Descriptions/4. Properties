«Платформа Microsoft .NET и язык программирования C#» №4 


Тема: Свойства.

Цель: 
Совершенствование навыков применения объектно-ориентированного подхода в программировании с 
использованием средств C#, создания пользовательских типов, использования свойств. 

Необходимые инструменты: MS Visual Studio 2013
Документация: Конспект, Литература


Задание 1.
Создайте класс Телевизор, обьявите в нем поле громкость звука, для доступа к этому полю реализуйте свойство. 
Громкость может быть в диапазоне от 0 до 100.

Задание 2.
Создать класс с именем Rectangle. 
В теле класса создать два поля, описывающие длины сторон double side1, side2. 
Создать пользовательский конструктор Rectangle(double side1, double side2), 
в теле которого поля side1 и side2 инициализируются значениями аргументов. 
Создать два метода, вычисляющие площадь прямоугольника – double AreaCalculator() и 
периметр прямоугольника – double PerimeterCalculator(). 
Создать два свойства double Area и double Perimeter с одним методом доступа get. 
Написать программу, которая принимает от пользователя длины двух сторон прямоугольника и выводит на 
экран периметр и площадь. 

Задание 3. 
Созадть класс Книга(название, автор,  жанр, год издания). Для каждого поля описать свойства.
Создать класс Домашняя библиотека. Предусмотреть возможность работы с произвольным числом книг, 
поиска книги по какому-либо признаку(по автору, по году издания или жанру), добавления книги в библиотеку, 
удаления книг из нее. Написать программу, демонстрирущую все разработанные элементы класса.

Задание 4.
Создать класс Вектор с гранулярным выделением памяти.
Поля(закрытие):
•	mass – ссылка на массив целых чисел(int[]);
•	count – количество заполненных элементов вектора(int);
•	capacity – гранулярное изменение размера вектора(по умолчанию –значение 5)(int).
Конструкторы:
•	по умолчанию;
•	с параметрами.
Свойства:
•	Count – для чтения количества заполненных элементов вектора;
•	Capacity(проверка на положительность числа) – для чтения и записи изменения размера вектора.
Методы:
•	PushBack – добавляет элемент в конец вектора;
•	PopBack – удаляет элемент с конца вектора;
•	Insert – вставляет элемент в нужную позицию;
•	Erase – удаляет элемент с нужной позиции;
•	Empty – делает проверку, пустой ли вектор;
•	At – возвращает значение элемента, индекс которого принимает метод;
•	Reverse – делает реверс вектора;
•	Clear – очищает вектор;
•	Print – выводит вектор на экран.
Реализовать меню для работы с классом.
